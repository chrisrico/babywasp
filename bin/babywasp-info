#!/usr/bin/env node

var async = require('async');
var crypto = require('crypto');
var utils = require('util');

var util = require('../lib/util');

util.init(onInit)
	.option('-a, --anonymize', 'Replace addresses, transaction IDs, etc with hashes')
	.option('-d, --depth', 'How many levels of object properties to traverse')
	.parse(process.argv);

function onInit(options, wallet) {
	wallet.load(function (err) {
		if (err) return console.error(err);

		var client = wallet.client;
		async.parallel({
			utxos: client.getUtxos.bind(client, {}),
			txps: client.getTxProposals.bind(client, {}),
			prefs: client.getPreferences.bind(client),
			history: client.getTxHistory.bind(client, {limit: 50})
		}, function (err, results) {
			if (err) return console.log(err);

			var printer = new Printer(options);
			if (results.prefs) printer.preferences(results.prefs);
			if (results.txps) printer.txps(results.txps);
			if (results.utxos) printer.utxos(results.utxos);
			if (results.history) printer.history(results.history);
		});
	});
}

function Printer(options) {
	options = options || {};
	this.depth = options.depth || 3;
	this.anonymize = options.anonymize;
}

Printer.prototype.print = function (data, keys) {
	if (this.anonymize) {
		data = anonymize(data, keys);
	}
	if (typeof(data) === 'string' || data instanceof String) {
		console.log(data);
	} else {
		console.log(utils.inspect(data, { depth: this.depth, colors: true }));
	}
};

Printer.prototype.heading = function(name) {
	this.print(name);
	this.print('='.repeat(process.stdout.columns));
};

Printer.prototype.preferences = function(prefs) {
	this.heading('Preferences');
	this.print(prefs, []);
};

Printer.prototype.txps = function(txps) {
	this.heading('Transaction Proposals');
	this.print(txps, ['walletId', 'creatorId', 'address', 'publicKeys']);
};

Printer.prototype.utxos = function(utxos) {
	this.heading('Unspent Transaction Outputs');
	this.print(utxos, ['txid', 'address', 'scriptPubKey']);
};

Printer.prototype.history = function(history) {
	this.heading('Transaction History');
	this.print(history, ['txid', 'address', 'addressTo', 'encryptedMessage', 'message']);
};

function hash(data) {
	if (!data) return data;
	return 'x' + crypto.createHash('sha256')
		.update(data)
		.digest('hex')
		.substring(0, 15);
}

function anonymize(data, keys) {
	if (Array.isArray(data)) {
		data = data.map(function (d) {
			return anonymize(d, keys);
		});
	} else if (data instanceof Object) {
		Object.keys(data)
			.forEach(function (k) {
				if (keys.indexOf(k) >= 0) {
					data[k] = hash(data[k]);
				} else {
					data[k] = anonymize(data[k], keys);
				}
			});
	}
	return data;
}