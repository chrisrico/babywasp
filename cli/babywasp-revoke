#!/usr/bin/env node
var fs = require('fs');
var async = require('async');
var bip39 = require('bip39');
var crypto = require('crypto')
var prompt = require('prompt');

var common = require('../common.js');

var schema = {
	properties: {
		mnemonic: {description: '12 word mnemonic created with the wallet', pattern: /^([\w]+\s?){12}$/, required: true},
	}
};

var walletFile;
var program = common.program()
	.arguments('<wallet-file>')
	.action(function (_walletFile) {
		walletFile = _walletFile;
	})
	.parse(process.argv);

if (!walletFile) program.help();

async.waterfall([
	getClientDoPrompt,
	getAPIKey,
	common.unlockWallet,
	disableEncryption,
	common.saveWalletCallback(walletFile)
], function (err) {
	if (err) console.log('[error] %s', err);
});

function getClientDoPrompt(next) {
	if (!client.canSign()) return next('Wallet has no private keys');
	prompt.start();
	async.series({
		client: async.apply(common.getClient, walletFile, program.host, program.verbose),
		prompt: async.apply(prompt.get, schema)
	}, function (err, results) {
		if (err) return next(err);
		return next(null, results.prompt, results.client);
	});
}

function getAPIKey(p, client, next) {
	if (!bip39.validateMnemonic(p.mnemonic.trim())) return next('Invalid mnemonic');
	var apiKey = crypto.createHash('sha256')
					.update(bip39.mnemonicToSeed(p.mnemonic))
					.digest('hex');
	return next(null, client, apiKey);
}

function disableEncryption(client, next) {
	try {
		client.disablePrivateKeyEncryption();
		return next(null, client, null);			
	} catch (e) {
		return next(e);
	}
}